// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: discovery.proto
#ifndef GRPC_discovery_2eproto__INCLUDED
#define GRPC_discovery_2eproto__INCLUDED

#include "discovery.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace discovery {

class DiscoveryService final {
 public:
  static constexpr char const* service_full_name() {
    return "discovery.DiscoveryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::discovery::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    virtual ::grpc::Status Discover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::discovery::DiscoverResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>> AsyncDiscover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>>(AsyncDiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>> PrepareAsyncDiscover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>>(PrepareAsyncDiscoverRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::discovery::ListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>> AsyncListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>>(AsyncListAllServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>> PrepareAsyncListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>>(PrepareAsyncListAllServicesRaw(context, request, cq));
    }
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::discovery::StateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::RegisterResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>* AsyncDiscoverRaw(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::DiscoverResponse>* PrepareAsyncDiscoverRaw(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>* AsyncListAllServicesRaw(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::ListResponse>* PrepareAsyncListAllServicesRaw(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::discovery::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::discovery::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>> AsyncRegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>>(AsyncRegisterServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>> PrepareAsyncRegisterService(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>>(PrepareAsyncRegisterServiceRaw(context, request, cq));
    }
    ::grpc::Status Discover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::discovery::DiscoverResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>> AsyncDiscover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>>(AsyncDiscoverRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>> PrepareAsyncDiscover(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>>(PrepareAsyncDiscoverRaw(context, request, cq));
    }
    ::grpc::Status ListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::discovery::ListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>> AsyncListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>>(AsyncListAllServicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>> PrepareAsyncListAllServices(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>>(PrepareAsyncListAllServicesRaw(context, request, cq));
    }
    ::grpc::Status State(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::discovery::StateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>* AsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::RegisterResponse>* PrepareAsyncRegisterServiceRaw(::grpc::ClientContext* context, const ::discovery::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>* AsyncDiscoverRaw(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::DiscoverResponse>* PrepareAsyncDiscoverRaw(::grpc::ClientContext* context, const ::discovery::DiscoverRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>* AsyncListAllServicesRaw(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::ListResponse>* PrepareAsyncListAllServicesRaw(::grpc::ClientContext* context, const ::discovery::ListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::discovery::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::discovery::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterService_;
    const ::grpc::internal::RpcMethod rpcmethod_Discover_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllServices_;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::discovery::RegisterRequest* request, ::discovery::RegisterResponse* response);
    virtual ::grpc::Status Discover(::grpc::ServerContext* context, const ::discovery::DiscoverRequest* request, ::discovery::DiscoverResponse* response);
    virtual ::grpc::Status ListAllServices(::grpc::ServerContext* context, const ::discovery::ListRequest* request, ::discovery::ListResponse* response);
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::discovery::StateRequest* request, ::discovery::StateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::discovery::RegisterRequest* request, ::discovery::RegisterResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterService(::grpc::ServerContext* context, ::discovery::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::discovery::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Discover() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::discovery::DiscoverRequest* request, ::discovery::DiscoverResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDiscover(::grpc::ServerContext* context, ::discovery::DiscoverRequest* request, ::grpc::ServerAsyncResponseWriter< ::discovery::DiscoverResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListAllServices() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListAllServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllServices(::grpc::ServerContext* context, const ::discovery::ListRequest* request, ::discovery::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllServices(::grpc::ServerContext* context, ::discovery::ListRequest* request, ::grpc::ServerAsyncResponseWriter< ::discovery::ListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::discovery::StateRequest* request, ::discovery::StateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::discovery::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::discovery::StateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterService<WithAsyncMethod_Discover<WithAsyncMethod_ListAllServices<WithAsyncMethod_State<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::discovery::RegisterRequest* request, ::discovery::RegisterResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Discover() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::discovery::DiscoverRequest* request, ::discovery::DiscoverResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAllServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListAllServices() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListAllServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllServices(::grpc::ServerContext* context, const ::discovery::ListRequest* request, ::discovery::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::discovery::StateRequest* request, ::discovery::StateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::discovery::RegisterRequest, ::discovery::RegisterResponse>(std::bind(&WithStreamedUnaryMethod_RegisterService<BaseClass>::StreamedRegisterService, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterService(::grpc::ServerContext* context, const ::discovery::RegisterRequest* request, ::discovery::RegisterResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::discovery::RegisterRequest,::discovery::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Discover : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Discover() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::discovery::DiscoverRequest, ::discovery::DiscoverResponse>(std::bind(&WithStreamedUnaryMethod_Discover<BaseClass>::StreamedDiscover, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Discover() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Discover(::grpc::ServerContext* context, const ::discovery::DiscoverRequest* request, ::discovery::DiscoverResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDiscover(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::discovery::DiscoverRequest,::discovery::DiscoverResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllServices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListAllServices() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::discovery::ListRequest, ::discovery::ListResponse>(std::bind(&WithStreamedUnaryMethod_ListAllServices<BaseClass>::StreamedListAllServices, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAllServices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllServices(::grpc::ServerContext* context, const ::discovery::ListRequest* request, ::discovery::ListResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllServices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::discovery::ListRequest,::discovery::ListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::discovery::StateRequest, ::discovery::StateResponse>(std::bind(&WithStreamedUnaryMethod_State<BaseClass>::StreamedState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* context, const ::discovery::StateRequest* request, ::discovery::StateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::discovery::StateRequest,::discovery::StateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_Discover<WithStreamedUnaryMethod_ListAllServices<WithStreamedUnaryMethod_State<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterService<WithStreamedUnaryMethod_Discover<WithStreamedUnaryMethod_ListAllServices<WithStreamedUnaryMethod_State<Service > > > > StreamedService;
};

}  // namespace discovery


#endif  // GRPC_discovery_2eproto__INCLUDED
