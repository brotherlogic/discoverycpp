// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#ifndef PROTOBUF_discovery_2eproto__INCLUDED
#define PROTOBUF_discovery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_discovery_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRegistryEntryImpl();
void InitDefaultsRegistryEntry();
void InitDefaultsServiceListImpl();
void InitDefaultsServiceList();
void InitDefaultsEmptyImpl();
void InitDefaultsEmpty();
void InitDefaultsStateResponseImpl();
void InitDefaultsStateResponse();
void InitDefaultsStateRequestImpl();
void InitDefaultsStateRequest();
inline void InitDefaults() {
  InitDefaultsRegistryEntry();
  InitDefaultsServiceList();
  InitDefaultsEmpty();
  InitDefaultsStateResponse();
  InitDefaultsStateRequest();
}
}  // namespace protobuf_discovery_2eproto
namespace discovery {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class RegistryEntry;
class RegistryEntryDefaultTypeInternal;
extern RegistryEntryDefaultTypeInternal _RegistryEntry_default_instance_;
class ServiceList;
class ServiceListDefaultTypeInternal;
extern ServiceListDefaultTypeInternal _ServiceList_default_instance_;
class StateRequest;
class StateRequestDefaultTypeInternal;
extern StateRequestDefaultTypeInternal _StateRequest_default_instance_;
class StateResponse;
class StateResponseDefaultTypeInternal;
extern StateResponseDefaultTypeInternal _StateResponse_default_instance_;
}  // namespace discovery
namespace discovery {

// ===================================================================

class RegistryEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:discovery.RegistryEntry) */ {
 public:
  RegistryEntry();
  virtual ~RegistryEntry();

  RegistryEntry(const RegistryEntry& from);

  inline RegistryEntry& operator=(const RegistryEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegistryEntry(RegistryEntry&& from) noexcept
    : RegistryEntry() {
    *this = ::std::move(from);
  }

  inline RegistryEntry& operator=(RegistryEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegistryEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistryEntry* internal_default_instance() {
    return reinterpret_cast<const RegistryEntry*>(
               &_RegistryEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RegistryEntry* other);
  friend void swap(RegistryEntry& a, RegistryEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegistryEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  RegistryEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegistryEntry& from);
  void MergeFrom(const RegistryEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegistryEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string identifier = 5;
  void clear_identifier();
  static const int kIdentifierFieldNumber = 5;
  const ::std::string& identifier() const;
  void set_identifier(const ::std::string& value);
  #if LANG_CXX11
  void set_identifier(::std::string&& value);
  #endif
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  ::std::string* mutable_identifier();
  ::std::string* release_identifier();
  void set_allocated_identifier(::std::string* identifier);

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // bool external_port = 4;
  void clear_external_port();
  static const int kExternalPortFieldNumber = 4;
  bool external_port() const;
  void set_external_port(bool value);

  // bool master = 6;
  void clear_master();
  static const int kMasterFieldNumber = 6;
  bool master() const;
  void set_master(bool value);

  // bool ignores_master = 10;
  void clear_ignores_master();
  static const int kIgnoresMasterFieldNumber = 10;
  bool ignores_master() const;
  void set_ignores_master(bool value);

  // int64 register_time = 7;
  void clear_register_time();
  static const int kRegisterTimeFieldNumber = 7;
  ::google::protobuf::int64 register_time() const;
  void set_register_time(::google::protobuf::int64 value);

  // int64 time_to_clean = 8;
  void clear_time_to_clean();
  static const int kTimeToCleanFieldNumber = 8;
  ::google::protobuf::int64 time_to_clean() const;
  void set_time_to_clean(::google::protobuf::int64 value);

  // int64 last_seen_time = 9;
  void clear_last_seen_time();
  static const int kLastSeenTimeFieldNumber = 9;
  ::google::protobuf::int64 last_seen_time() const;
  void set_last_seen_time(::google::protobuf::int64 value);

  // int64 master_time = 11;
  void clear_master_time();
  static const int kMasterTimeFieldNumber = 11;
  ::google::protobuf::int64 master_time() const;
  void set_master_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:discovery.RegistryEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr identifier_;
  ::google::protobuf::int32 port_;
  bool external_port_;
  bool master_;
  bool ignores_master_;
  ::google::protobuf::int64 register_time_;
  ::google::protobuf::int64 time_to_clean_;
  ::google::protobuf::int64 last_seen_time_;
  ::google::protobuf::int64 master_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_discovery_2eproto::TableStruct;
  friend void ::protobuf_discovery_2eproto::InitDefaultsRegistryEntryImpl();
};
// -------------------------------------------------------------------

class ServiceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:discovery.ServiceList) */ {
 public:
  ServiceList();
  virtual ~ServiceList();

  ServiceList(const ServiceList& from);

  inline ServiceList& operator=(const ServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServiceList(ServiceList&& from) noexcept
    : ServiceList() {
    *this = ::std::move(from);
  }

  inline ServiceList& operator=(ServiceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceList* internal_default_instance() {
    return reinterpret_cast<const ServiceList*>(
               &_ServiceList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ServiceList* other);
  friend void swap(ServiceList& a, ServiceList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServiceList* New() const PROTOBUF_FINAL { return New(NULL); }

  ServiceList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServiceList& from);
  void MergeFrom(const ServiceList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServiceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .discovery.RegistryEntry services = 1;
  int services_size() const;
  void clear_services();
  static const int kServicesFieldNumber = 1;
  const ::discovery::RegistryEntry& services(int index) const;
  ::discovery::RegistryEntry* mutable_services(int index);
  ::discovery::RegistryEntry* add_services();
  ::google::protobuf::RepeatedPtrField< ::discovery::RegistryEntry >*
      mutable_services();
  const ::google::protobuf::RepeatedPtrField< ::discovery::RegistryEntry >&
      services() const;

  // @@protoc_insertion_point(class_scope:discovery.ServiceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::discovery::RegistryEntry > services_;
  mutable int _cached_size_;
  friend struct ::protobuf_discovery_2eproto::TableStruct;
  friend void ::protobuf_discovery_2eproto::InitDefaultsServiceListImpl();
};
// -------------------------------------------------------------------

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:discovery.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const PROTOBUF_FINAL { return New(NULL); }

  Empty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:discovery.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_discovery_2eproto::TableStruct;
  friend void ::protobuf_discovery_2eproto::InitDefaultsEmptyImpl();
};
// -------------------------------------------------------------------

class StateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:discovery.StateResponse) */ {
 public:
  StateResponse();
  virtual ~StateResponse();

  StateResponse(const StateResponse& from);

  inline StateResponse& operator=(const StateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateResponse(StateResponse&& from) noexcept
    : StateResponse() {
    *this = ::std::move(from);
  }

  inline StateResponse& operator=(StateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateResponse* internal_default_instance() {
    return reinterpret_cast<const StateResponse*>(
               &_StateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StateResponse* other);
  friend void swap(StateResponse& a, StateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StateResponse& from);
  void MergeFrom(const StateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string counts = 1;
  void clear_counts();
  static const int kCountsFieldNumber = 1;
  const ::std::string& counts() const;
  void set_counts(const ::std::string& value);
  #if LANG_CXX11
  void set_counts(::std::string&& value);
  #endif
  void set_counts(const char* value);
  void set_counts(const char* value, size_t size);
  ::std::string* mutable_counts();
  ::std::string* release_counts();
  void set_allocated_counts(::std::string* counts);

  // int32 len = 2;
  void clear_len();
  static const int kLenFieldNumber = 2;
  ::google::protobuf::int32 len() const;
  void set_len(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:discovery.StateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr counts_;
  ::google::protobuf::int32 len_;
  mutable int _cached_size_;
  friend struct ::protobuf_discovery_2eproto::TableStruct;
  friend void ::protobuf_discovery_2eproto::InitDefaultsStateResponseImpl();
};
// -------------------------------------------------------------------

class StateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:discovery.StateRequest) */ {
 public:
  StateRequest();
  virtual ~StateRequest();

  StateRequest(const StateRequest& from);

  inline StateRequest& operator=(const StateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateRequest(StateRequest&& from) noexcept
    : StateRequest() {
    *this = ::std::move(from);
  }

  inline StateRequest& operator=(StateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateRequest* internal_default_instance() {
    return reinterpret_cast<const StateRequest*>(
               &_StateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(StateRequest* other);
  friend void swap(StateRequest& a, StateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StateRequest& from);
  void MergeFrom(const StateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:discovery.StateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_discovery_2eproto::TableStruct;
  friend void ::protobuf_discovery_2eproto::InitDefaultsStateRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegistryEntry

// string ip = 1;
inline void RegistryEntry::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryEntry::ip() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.ip)
  return ip_.GetNoArena();
}
inline void RegistryEntry::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.ip)
}
#if LANG_CXX11
inline void RegistryEntry::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:discovery.RegistryEntry.ip)
}
#endif
inline void RegistryEntry::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discovery.RegistryEntry.ip)
}
inline void RegistryEntry::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discovery.RegistryEntry.ip)
}
inline ::std::string* RegistryEntry::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:discovery.RegistryEntry.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryEntry::release_ip() {
  // @@protoc_insertion_point(field_release:discovery.RegistryEntry.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryEntry::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:discovery.RegistryEntry.ip)
}

// int32 port = 2;
inline void RegistryEntry::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 RegistryEntry::port() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.port)
  return port_;
}
inline void RegistryEntry::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.port)
}

// string name = 3;
inline void RegistryEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryEntry::name() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.name)
  return name_.GetNoArena();
}
inline void RegistryEntry::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.name)
}
#if LANG_CXX11
inline void RegistryEntry::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:discovery.RegistryEntry.name)
}
#endif
inline void RegistryEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discovery.RegistryEntry.name)
}
inline void RegistryEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discovery.RegistryEntry.name)
}
inline ::std::string* RegistryEntry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:discovery.RegistryEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryEntry::release_name() {
  // @@protoc_insertion_point(field_release:discovery.RegistryEntry.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:discovery.RegistryEntry.name)
}

// bool external_port = 4;
inline void RegistryEntry::clear_external_port() {
  external_port_ = false;
}
inline bool RegistryEntry::external_port() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.external_port)
  return external_port_;
}
inline void RegistryEntry::set_external_port(bool value) {
  
  external_port_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.external_port)
}

// string identifier = 5;
inline void RegistryEntry::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegistryEntry::identifier() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.identifier)
  return identifier_.GetNoArena();
}
inline void RegistryEntry::set_identifier(const ::std::string& value) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.identifier)
}
#if LANG_CXX11
inline void RegistryEntry::set_identifier(::std::string&& value) {
  
  identifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:discovery.RegistryEntry.identifier)
}
#endif
inline void RegistryEntry::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discovery.RegistryEntry.identifier)
}
inline void RegistryEntry::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discovery.RegistryEntry.identifier)
}
inline ::std::string* RegistryEntry::mutable_identifier() {
  
  // @@protoc_insertion_point(field_mutable:discovery.RegistryEntry.identifier)
  return identifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegistryEntry::release_identifier() {
  // @@protoc_insertion_point(field_release:discovery.RegistryEntry.identifier)
  
  return identifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegistryEntry::set_allocated_identifier(::std::string* identifier) {
  if (identifier != NULL) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:discovery.RegistryEntry.identifier)
}

// bool master = 6;
inline void RegistryEntry::clear_master() {
  master_ = false;
}
inline bool RegistryEntry::master() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.master)
  return master_;
}
inline void RegistryEntry::set_master(bool value) {
  
  master_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.master)
}

// int64 register_time = 7;
inline void RegistryEntry::clear_register_time() {
  register_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegistryEntry::register_time() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.register_time)
  return register_time_;
}
inline void RegistryEntry::set_register_time(::google::protobuf::int64 value) {
  
  register_time_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.register_time)
}

// int64 time_to_clean = 8;
inline void RegistryEntry::clear_time_to_clean() {
  time_to_clean_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegistryEntry::time_to_clean() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.time_to_clean)
  return time_to_clean_;
}
inline void RegistryEntry::set_time_to_clean(::google::protobuf::int64 value) {
  
  time_to_clean_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.time_to_clean)
}

// int64 last_seen_time = 9;
inline void RegistryEntry::clear_last_seen_time() {
  last_seen_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegistryEntry::last_seen_time() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.last_seen_time)
  return last_seen_time_;
}
inline void RegistryEntry::set_last_seen_time(::google::protobuf::int64 value) {
  
  last_seen_time_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.last_seen_time)
}

// bool ignores_master = 10;
inline void RegistryEntry::clear_ignores_master() {
  ignores_master_ = false;
}
inline bool RegistryEntry::ignores_master() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.ignores_master)
  return ignores_master_;
}
inline void RegistryEntry::set_ignores_master(bool value) {
  
  ignores_master_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.ignores_master)
}

// int64 master_time = 11;
inline void RegistryEntry::clear_master_time() {
  master_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RegistryEntry::master_time() const {
  // @@protoc_insertion_point(field_get:discovery.RegistryEntry.master_time)
  return master_time_;
}
inline void RegistryEntry::set_master_time(::google::protobuf::int64 value) {
  
  master_time_ = value;
  // @@protoc_insertion_point(field_set:discovery.RegistryEntry.master_time)
}

// -------------------------------------------------------------------

// ServiceList

// repeated .discovery.RegistryEntry services = 1;
inline int ServiceList::services_size() const {
  return services_.size();
}
inline void ServiceList::clear_services() {
  services_.Clear();
}
inline const ::discovery::RegistryEntry& ServiceList::services(int index) const {
  // @@protoc_insertion_point(field_get:discovery.ServiceList.services)
  return services_.Get(index);
}
inline ::discovery::RegistryEntry* ServiceList::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:discovery.ServiceList.services)
  return services_.Mutable(index);
}
inline ::discovery::RegistryEntry* ServiceList::add_services() {
  // @@protoc_insertion_point(field_add:discovery.ServiceList.services)
  return services_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::discovery::RegistryEntry >*
ServiceList::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:discovery.ServiceList.services)
  return &services_;
}
inline const ::google::protobuf::RepeatedPtrField< ::discovery::RegistryEntry >&
ServiceList::services() const {
  // @@protoc_insertion_point(field_list:discovery.ServiceList.services)
  return services_;
}

// -------------------------------------------------------------------

// Empty

// -------------------------------------------------------------------

// StateResponse

// string counts = 1;
inline void StateResponse::clear_counts() {
  counts_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateResponse::counts() const {
  // @@protoc_insertion_point(field_get:discovery.StateResponse.counts)
  return counts_.GetNoArena();
}
inline void StateResponse::set_counts(const ::std::string& value) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:discovery.StateResponse.counts)
}
#if LANG_CXX11
inline void StateResponse::set_counts(::std::string&& value) {
  
  counts_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:discovery.StateResponse.counts)
}
#endif
inline void StateResponse::set_counts(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:discovery.StateResponse.counts)
}
inline void StateResponse::set_counts(const char* value, size_t size) {
  
  counts_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:discovery.StateResponse.counts)
}
inline ::std::string* StateResponse::mutable_counts() {
  
  // @@protoc_insertion_point(field_mutable:discovery.StateResponse.counts)
  return counts_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateResponse::release_counts() {
  // @@protoc_insertion_point(field_release:discovery.StateResponse.counts)
  
  return counts_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateResponse::set_allocated_counts(::std::string* counts) {
  if (counts != NULL) {
    
  } else {
    
  }
  counts_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), counts);
  // @@protoc_insertion_point(field_set_allocated:discovery.StateResponse.counts)
}

// int32 len = 2;
inline void StateResponse::clear_len() {
  len_ = 0;
}
inline ::google::protobuf::int32 StateResponse::len() const {
  // @@protoc_insertion_point(field_get:discovery.StateResponse.len)
  return len_;
}
inline void StateResponse::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:discovery.StateResponse.len)
}

// -------------------------------------------------------------------

// StateRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace discovery

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_discovery_2eproto__INCLUDED
